//------------------------------------------------------------------------
// Name:    Pairsh
//
// Purpose: Adjust vent positions based on area, read in the variables from
// the child apps, and output the vent level back to the child app.
//
//------------------------------------------------------------------------

#include <iostream>
#include <iomanip>
#include <string>
#include <stdio.h>
using namespace std;

// Globals
const int staticArea = 72;
const int targetArea = 400;
const int maxDelta = 5;
const int totalRooms = 14;
float targetArea_1 = 0;
float stage2AreaSum = 0;
float stage1PrioritySum = 0;
float initWeightSum = 0;
float remainingActiveAreaSum = 0;
float finalAreaSum = 0;
float totalOpenArea = 0;
float totalVentArea = staticArea;
float stage1AreaSum = 0;
float addvalue = 0;
float prioritySum = 0;

// Structure array for vents values
struct roomValues
{
	float targetTempIn; // Input from Child App
	float currentTempIn; // Input from Child App
	int minOpenIn; // Input from Child App
	int maxOpenIn; // Input from Child App
	int ventLevelOut; // Output to Child App
	float ventAreaIn; // Input from Child App
	float stage1Delta;
	float initOpen;
	float initArea;
	float stage1Priority;
	float stage1Weight;
	float availArea;
	float stage1Area;
	float stage1SetVent;
	float intSetArea;
	float stage2Delta;
	float stage2Priority;
	float stage2Weight;
	float stage2AreaAdd;
	float stage2AreaAdj;
	float stage2FinalArea;
};

roomValues rooms[totalRooms];// testing with 14 rooms

// ======================================================================
//  Prototype Function declarations:
// ======================================================================

void setVentValues(roomValues room[], int size);
void ActiveRooms(roomValues room[], int size);
void InactiveRooms(roomValues room[], int size);



// ======================================================================
//  Main Routine
// ======================================================================
int main()
{
	// Set default values for testing
	setVentValues(rooms, totalRooms);

	//Stage 1 Active room calculation
	ActiveRooms(rooms, totalRooms);

	//Stage 2 Inactive room calculation
	//Start Code for using the vents in rooms not calling for heat based on how close they are 
	//to the target temp, this is only needed when the vent area for rooms calling for heat
	//are not enough to hit the target area.
	InactiveRooms(rooms, totalRooms);



	//*****************************************************
	//Output the vent level and area for viewing
	// Set decimal formatting.
	cout << fixed << showpoint << setprecision(2);

	for (int i = 0; i < totalRooms; i++)
	{
		cout << "Vent Level " << rooms[i].ventLevelOut << " Area " << rooms[i].stage2FinalArea << endl;
	}
	cout << "Target Area " << targetArea << endl;
	cout << "Result Area " << finalAreaSum << endl;
	//*****************************************************

	return 0;
}

// ======================================================================
//  Functions Definitions:
// ======================================================================

// Purpose: Initial room values
// These would come from the child rooms //arbitrary values for now
void setVentValues(roomValues room[], int size)
{
	for (int i = 0; i < size; i++)
	{
		room[i].ventAreaIn = (38);
		room[i].minOpenIn = 0;
		room[i].maxOpenIn = 100;
		room[i].currentTempIn = 60.0 + i;
		room[i].targetTempIn = 68.0;
		room[i].ventLevelOut = 68.0 + i;
	}
}


// Purpose: values for active rooms requiring heat
void ActiveRooms(roomValues room[], int size)
{

	for (int i = 0; i < size; i++)
	{
		room[i].stage1Delta = room[i].targetTempIn - room[i].currentTempIn; //find active room delta's
		room[i].initOpen = 100 / maxDelta * room[i].stage1Delta;
		if (room[i].initOpen > 100)
			room[i].initOpen = 100;

		if (room[i].initOpen < 0)
			room[i].initOpen = 0;

		room[i].initOpen = (room[i].initOpen * .01 * room[i].maxOpenIn); //set initial vent position
		room[i].initArea = room[i].ventAreaIn * room[i].initOpen * .01;
		totalVentArea = room[i].initArea + totalVentArea;
	}

	targetArea_1 = (targetArea - totalVentArea);

	for (int i = 0; i < size; i++)
	{
		room[i].stage1Priority = 100 - (100 / room[i].targetTempIn * room[i].currentTempIn);
		if (room[i].stage1Priority > 0)
			room[i].stage1Priority = room[i].stage1Priority * (room[i].ventAreaIn - room[i].initArea);
		else
			room[i].stage1Priority = 0;

		stage1PrioritySum = stage1PrioritySum + room[i].stage1Priority;
	}

	for (int i = 0; i < size; i++)
	{
		room[i].stage1Weight = 100 / stage1PrioritySum * room[i].stage1Priority; //stage 1 weight values
	}

	for (int i = 0; i < size; i++)
	{
		if (room[i].initArea > 0)
			room[i].availArea = room[i].ventAreaIn - room[i].initArea;
		else
			room[i].availArea = 0;

		remainingActiveAreaSum = remainingActiveAreaSum + room[i].availArea;
	}


	for (int i = 0; i < size; i++)
	{
		if (remainingActiveAreaSum <= targetArea_1)
			if (room[i].availArea > 0)
				addvalue = (100 - room[i].initOpen);
			else
				addvalue = 0;

		else
			addvalue = (100.0 / remainingActiveAreaSum * room[i].availArea * targetArea_1 * 0.01 * 100.0 / room[i].ventAreaIn);


		room[i].stage1SetVent = room[i].initOpen + addvalue;
		room[i].stage1Area = room[i].ventAreaIn * room[i].stage1SetVent * .01;
		stage1AreaSum = stage1AreaSum + room[i].stage1Area;
	}

	stage2AreaSum = targetArea - (stage1AreaSum + staticArea);

}

// Purpose: use non active rooms to acheive target area
void InactiveRooms(roomValues room[], int size)
{
	//Get the priority value for each room based on delta
	for (int i = 0; i < size; i++)
	{
		if (room[i].stage1SetVent == 0)
			room[i].stage2Delta = room[i].currentTempIn - room[i].targetTempIn;
		else
			room[i].stage2Delta = 0;

		if (room[i].stage2Delta != 0)
			room[i].stage2Priority = room[i].ventAreaIn - (100 / room[i].ventAreaIn * room[i].stage2Delta);
		else
			room[i].stage2Priority = 0;

		prioritySum = prioritySum + room[i].stage2Priority;
	}

	//Set final values
	for (int i = 0; i < size; i++)
	{
		room[i].stage2Weight = 100 / prioritySum * room[i].stage2Priority;
		room[i].stage2AreaAdd = stage2AreaSum * room[i].stage2Weight * 0.01;
		room[i].stage2AreaAdj = 100 / room[i].ventAreaIn * room[i].stage2AreaAdd;
		room[i].ventLevelOut = room[i].stage1SetVent + room[i].stage2AreaAdj;
		room[i].stage2FinalArea = room[i].ventAreaIn * room[i].ventLevelOut * 0.01;
		finalAreaSum = finalAreaSum + room[i].stage2FinalArea;
	}

	finalAreaSum = (finalAreaSum + staticArea);
}
